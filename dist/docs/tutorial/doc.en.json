[
  {
    "name": "1-basic",
    "sections": [
      {
        "name": "1-introduction",
        "content": "<div><p>Axii is a frontend framework based on reactive data structures. Its main features are:</p>\n<ul>\n<li>When reactive data structures receive dependency changes, they don't recalculate completely, but automatically use more efficient incremental computation updates. This provides significant performance improvements in many array computations.</li>\n<li>Precise updates of DOM structure and attributes by identifying reactive data. No Virtual DOM, no diff process.</li>\n</ul>\n<p>Axii aims to ensure high performance for developers in most scenarios without requiring extra effort.</p></div>"
      },
      {
        "name": "2-reactive_data_and_dynamic_part",
        "content": "<div><p>The reactive data structures in Axii include the following types:</p>\n<ul>\n<li>atom: Atomic data that is treated as a whole.</li>\n<li>RxList/RxMap/RxSet: Reactive collection data structures that emit signals when the collection changes, but changes within the collection objects are not deeply reactive.</li>\n<li>RxTime: A special reactive data structure for handling time.</li>\n</ul>\n<p>We can pass an atom to any DOM attribute, and when the atom's value changes, the DOM attribute will automatically update.\nWe can also map an RxList to a DOM array, and when the RxList's value changes, the DOM array will automatically update.</p>\n<p>Even if you're using RxMap/RxSet, they have corresponding toList methods that can convert them to RxList, allowing you to map them to DOM arrays.</p>\n<p>For more dynamic requirements, you can directly pass a function to represent the DOM structure that needs to be generated.</p></div>"
      },
      {
        "name": "3-component",
        "content": "<div><p>Axii Component Features:</p>\n<ul>\n<li>Supports default value creation. In scenarios where reactivity is not needed, regular values can be passed in, and the framework will automatically convert them.</li>\n<li>Internal DOM elements or child components can be exposed through explicit naming, eliminating unnecessary encapsulation.</li>\n</ul>\n<p>At this point, you're ready to happily use Axii!</p></div>"
      }
    ]
  },
  {
    "name": "2-advanced",
    "sections": [
      {
        "name": "1-computed",
        "content": ""
      },
      {
        "name": "2-RxList_RxSet_RxMap",
        "content": ""
      },
      {
        "name": "3-component_configuration",
        "content": ""
      },
      {
        "name": "4-component_context",
        "content": ""
      },
      {
        "name": "5-styling_transition_and_animation",
        "content": ""
      },
      {
        "name": "6-sideEffect",
        "content": ""
      },
      {
        "name": "7-create_reactive_data_from_dom_attr",
        "content": ""
      },
      {
        "name": "8-portal",
        "content": ""
      },
      {
        "name": "9-form",
        "content": ""
      },
      {
        "name": "10-selection",
        "content": ""
      }
    ]
  },
  {
    "name": "3-common_util",
    "sections": [
      {
        "name": "1-router",
        "content": ""
      },
      {
        "name": "2-action",
        "content": ""
      }
    ]
  }
]