[
  {
    "name": "1-basic",
    "sections": [
      {
        "name": "1-introduction",
        "content": "<div><p>Axii is a frontend framework based on reactive data structures. Its main features are:</p>\n<ul>\n<li>When reactive data structures receive dependency changes, they don't recalculate completely, but automatically use more efficient incremental computation updates. This provides significant performance improvements in many array computations.</li>\n<li>Precise updates of DOM structure and attributes by identifying reactive data. No Virtual DOM, no diff process.</li>\n</ul>\n<p>Axii aims to ensure high performance for developers in most scenarios without requiring extra effort.</p></div>"
      },
      {
        "name": "2-reactive_data_and_dynamic_part",
        "content": "<div><p>The reactive data structures in Axii include the following types:</p>\n<ul>\n<li>atom: Atomic data that is treated as a whole.</li>\n<li>RxList/RxMap/RxSet: Reactive collection data structures that emit signals when the collection changes, but changes within the collection objects are not deeply reactive.</li>\n<li>RxTime: A special reactive data structure for handling time.</li>\n</ul>\n<p>We can pass an atom to any DOM attribute, and when the atom's value changes, the DOM attribute will automatically update.\nWe can also map an RxList to a DOM array, and when the RxList's value changes, the DOM array will automatically update.</p>\n<p>Even if you're using RxMap/RxSet, they have corresponding toList methods that can convert them to RxList, allowing you to map them to DOM arrays.</p>\n<p>For more dynamic requirements, you can directly pass a function to represent the DOM structure that needs to be generated.</p></div>"
      },
      {
        "name": "3-component",
        "content": "<div><p>Axii Component Features:</p>\n<ul>\n<li>Supports default value creation. In scenarios where reactivity is not needed, regular values can be passed in, and the framework will automatically convert them.</li>\n<li>Internal DOM elements or child components can be exposed through explicit naming, eliminating unnecessary encapsulation.</li>\n</ul>\n<p>At this point, you're ready to happily use Axii!</p></div>"
      }
    ]
  },
  {
    "name": "2-advanced",
    "sections": [
      {
        "name": "1-computed",
        "content": "<div><p>Reactive data is a core concept in axii.\nThere are three ways to create reactive data:</p>\n<ul>\n<li>Using the APIs of RxList/RxMap/RxSet to create reactive data. Most calculations in APIs are incremental, which means when dependencies change, it won't recalculate everything but only make minimal incremental changes. Using APIs should be the first consideration.</li>\n<li>Using the constructors of RxList/RxMap/RxSet to create reactive data. When passing computation logic as parameters to the constructor, any change in dependencies within the computation logic will trigger a recalculation.</li>\n<li>Using computed to create atom-type reactive data. Any change in dependencies will trigger a recalculation.</li>\n</ul></div>"
      },
      {
        "name": "2-RxList_RxSet_RxMap",
        "content": "<div><p>RxList/RxMap/RxSet are built-in reactive data structures in axii.\nTheir APIs are similar to JavaScript's Array/Map/Set.\nFor more detailed examples, please refer to their test cases.</p>\n<ul>\n<li><a href=\"https://github.com/sskyy/data0/blob/main/__tests__/rxList.spec.ts\">RxList</a></li>\n<li><a href=\"https://github.com/sskyy/data0/blob/main/__tests__/rxMap.spec.ts\">RxMap</a></li>\n<li><a href=\"https://github.com/sskyy/data0/blob/main/__tests__/rxSet.spec.ts\">RxSet</a></li>\n</ul></div>"
      },
      {
        "name": "3-component_AOP",
        "content": "<div><p>In axii, users can easily expose child components/DOM nodes to the outside, eliminating unnecessary encapsulation.\nSimply use <code>as</code> to name the nodes you want to expose.</p></div>"
      },
      {
        "name": "4-component_context",
        "content": "<div><p>Like other frameworks, axii allows data to be passed through context.</p></div>"
      },
      {
        "name": "5-styling_transition_and_animation",
        "content": ""
      },
      {
        "name": "6-sideEffect",
        "content": "<div><p>axii supports using useEffect and useLayoutEffect to create side effects.</p>\n<p>Additionally, axii provides a more elegant way to handle side effects.\nUsers can declare a class that inherits from ManualCleanup and implement the destroy method. Any ManualCleanup subclass instantiated in a component will automatically call the destroy method when the component is destroyed.</p></div>"
      },
      {
        "name": "7-create_reactive_data_from_dom_attr",
        "content": "<div><p>DOM states are not reactive, and we often need to:</p>\n<ul>\n<li>Listen to state changes through event callbacks.</li>\n<li>Transform data changes into DOM state changes through APIs.</li>\n</ul>\n<p>axii provides reactive wrappers for commonly used DOM states, and users can also customize DOM state reactive wrappers using createStateFromRef.\nExisting wrappers include:</p>\n<ul>\n<li>dom size</li>\n<li>position</li>\n<li>drag position</li>\n<li>scroll position</li>\n</ul></div>"
      },
      {
        "name": "8-portal",
        "content": "<div><p>axii supports rendering components under different root nodes, commonly used in scenarios like popups.</p></div>"
      },
      {
        "name": "9-selection",
        "content": "<div><p>axii provides built-in tools for creating single and multiple selections, ensuring that not all rows recalculate their selected state when selection changes. This maintains high performance at all times.</p></div>"
      }
    ]
  },
  {
    "name": "3-common_util",
    "sections": [
      {
        "name": "1-router",
        "content": ""
      },
      {
        "name": "2-action",
        "content": ""
      }
    ]
  }
]