[
  {
    "name": "1-basic",
    "sections": [
      {
        "name": "1-introduction",
        "content": "<div><h1>はじめに</h1>\n<p>Axiiはリアクティブデータ構造に基づくフロントエンドフレームワークです。主な特徴は以下の通りです：</p>\n<ul>\n<li>リアクティブデータ構造は、依存関係の変更を受け取った際に完全な再計算を行わず、より効率的な増分計算更新を自動的に使用します。これは特に配列の多くの計算において大きなパフォーマンス向上をもたらします。</li>\n<li>リアクティブデータを識別することにより、DOM構造と属性の正確な更新を実現します。Virtual DOMは不要で、差分計算プロセスもありません。</li>\n</ul>\n<p>Axiiは、ほとんどのシナリオにおいて、開発者が追加の労力を必要とせずに高いパフォーマンスを確保することを目指しています。</p></div>"
      },
      {
        "name": "2-reactive_data_and_dynamic_part",
        "content": "<div><p>Axiiのリアクティブデータ構造には以下の種類があります：</p>\n<ul>\n<li>atom：全体として扱われる原子データ。</li>\n<li>RxList/RxMap/RxSet：コレクションが変更されると信号を発するリアクティブなコレクションデータ構造。ただし、コレクションオブジェクト内部の変更は深くリアクティブではありません。</li>\n<li>RxTime：時間を扱うための特別なリアクティブデータ構造。</li>\n</ul>\n<p>atomは任意のDOM属性に渡すことができ、atomの値が変更されると、DOM属性は自動的に更新されます。\nまた、RxListをDOM配列にマップすることができ、RxListの値が変更されると、DOM配列は自動的に更新されます。</p>\n<p>RxMap/RxSetを使用している場合でも、それらにはRxListに変換できるtoListメソッドがあり、DOM配列にマップすることができます。</p>\n<p>より動的な要件に対しては、生成が必要なDOM構造を表す関数を直接渡すことができます。</p></div>"
      },
      {
        "name": "3-component",
        "content": "<div><p>Axiiコンポーネントの特徴：</p>\n<ul>\n<li>デフォルト値の作成をサポートします。リアクティビティが不要なシナリオでは通常の値を渡すことができ、フレームワークが自動的に変換します。</li>\n<li>内部のDOM要素や子コンポーネントを明示的な命名によって公開することができ、不要なカプセル化を排除します。</li>\n</ul>\n<p>これで、Axiiを楽しく使い始めることができます！</p></div>"
      }
    ]
  },
  {
    "name": "2-advanced",
    "sections": [
      {
        "name": "1-computed",
        "content": "<div><p>リアクティブデータは axii の核となる概念です。\nリアクティブデータを作成する方法は3つあります：</p>\n<ul>\n<li>RxList/RxMap/RxSet の API を使用してリアクティブデータを作成します。API での計算のほとんどは増分形式で、依存関係が変更された場合、すべてを再計算するのではなく、最小限の増分変更のみを行います。API の使用を最優先に考慮すべきです。</li>\n<li>RxList/RxMap/RxSet のコンストラクタを使用してリアクティブデータを作成します。計算ロジックをコンストラクタにパラメータとして渡す場合、計算ロジック内の依存関係が変更されるたびに再計算がトリガーされます。</li>\n<li>computed を使用して atom タイプのリアクティブデータを作成します。依存関係が変更されるたびに再計算がトリガーされます。</li>\n</ul></div>"
      },
      {
        "name": "2-RxList_RxSet_RxMap",
        "content": "<div><p>RxList/RxMap/RxSet は axii の組み込みリアクティブデータ構造です。\nこれらの API は JavaScript の Array/Map/Set に似ています。\nより詳細な例については、それぞれのテストケースを参照してください。</p>\n<ul>\n<li><a href=\"https://github.com/sskyy/data0/blob/main/__tests__/rxList.spec.ts\">RxList</a></li>\n<li><a href=\"https://github.com/sskyy/data0/blob/main/__tests__/rxMap.spec.ts\">RxMap</a></li>\n<li><a href=\"https://github.com/sskyy/data0/blob/main/__tests__/rxSet.spec.ts\">RxSet</a></li>\n</ul></div>"
      },
      {
        "name": "3-component_AOP",
        "content": "<div><p>axii では、複雑な UI をコンポーネントとしてカプセル化し、それらを組み合わせて使用することがよくあります。しかし、単純なネスト構造であっても、しばしば以下のような問題が起こります：</p>\n<ul>\n<li>子コンポーネント内の複数の DOM ノードや特定のプロパティを、親コンポーネントで設定・利用できるように公開する必要がある。</li>\n<li>プロパティをレイヤーごとに透過させたり増やしたりすると、「意味のない」中間レイヤーが生じてコンポーネント構造が複雑化してしまう。</li>\n</ul>\n<p>この問題を解決するため、axii は「AOP ライク」な機能を提供しています。これにより、親コンポーネントが直接子コンポーネント内部に\"侵入\"し、内部の DOM や子コンポーネントを柔軟に<strong>上書き</strong>したり<strong>パッチをあてたり</strong>することができます。こうしてコンポーネントのカプセル化を維持しつつ、必要に応じてプロパティやイベントを透過させる作業を簡略化できます。</p>\n<h2>コアアイデア</h2>\n<p>axii の実装では、<code>ComponentHost</code> が渡されたプロパティを解析します。もしプロパティ名が <code>$</code> で始まっていた場合、axii はそれを本コンポーネントの通常のプロパティではなく、子コンポーネントや子要素に対する「設定」として扱います。<br>\n設定では、コロン (<code>:</code>) の後ろの部分が適用対象のプロパティやメソッドを表します。例えば：</p>\n<ul>\n<li><code>$xxx:style</code> は、<code>as=xxx</code> として定義された要素にインライン <code>style</code> を追加する</li>\n<li><code>$xxx:value</code> は、<code>as=xxx</code> として定義された要素に <code>value</code> を設定（通常は <code>&lt;input&gt;</code> などで使用）</li>\n<li><code>$xxx:style_</code> は、カスタムのマージロジックを利用してスタイルをより柔軟に上書きできる</li>\n<li><code>$xxx:children</code> は、指定ノードの子要素を置き換える</li>\n<li><code>$xxx:_props</code> は、内部のノードやコンポーネントのすべてのプロパティに対して一括処理を行い、カスタムのマージロジックをサポートする</li>\n</ul>\n<p>ソースコード上では、これら <code>$</code> で始まるプロパティはすべて収集され、<code>itemConfig</code> にマージされます。最終的に描画（レンダリング）される段階で、各 DOM ノードや子コンポーネントに対してこれらの設定が適用される仕組みです。つまり、以下のように親コンポーネントで指定できます：</p>\n<pre><code class=\" language-tsx\">/ @jsx createElement /\nimport { atom, RenderContext } from \"axii\"\nimport { Child } from \"./Child.js\";\nexport function App({}, { createElement }: RenderContext) {\n    const name = atom('world')\n    return (\n        &lt;Child\n            // 将子组件中 \"as=root\" 的元素添加一个 style\n            $root:style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}\n            // 给 as=main 的 &lt;input&gt; 元素绑定 atom\n            $main:value={name}\n            // 通过 style_ 自定义合并逻辑\n            $main:style_={() =&gt; ({ border: '1px solid black', padding: '10px' })}\n            // 给 \"grandChild\" 节点添加更多配置\n            $grandChild={{\n                '$root:style': { color: 'cyan' }\n            }}\n        /&gt;\n    )\n}\n</code></pre>\n<p>このように、子コンポーネント <code>Child</code> が内部で <code>as=\"root\"</code>・<code>as=\"main\"</code>・<code>as=\"grandChild\"</code> のような複数のノードを定義している場合でも、親コンポーネントは <code>$</code> で始めるプロパティを使って、そのノードや子コンポーネントのプロパティを直接渡すあるいは上書きすることができます。</p>\n<p>子コンポーネント <code>Child</code> は、このように簡潔に記述できます：</p>\n<pre><code class=\" language-tsx\">/ @jsx createElement /\nimport { RenderContext } from \"axii\";\nimport { GrandChild } from \"./GrandChild.js\";\nexport function Child({}, { createElement }: RenderContext) {\n    return (\n        &lt;div as=\"root\"&gt;\n        &lt;input as=\"main\" /&gt;\n        &lt;button as=\"trigger\"&gt;Submit&lt;/button&gt;\n        &lt;GrandChild as=\"grandChild\" /&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n<p><code>GrandChild</code> でも同様です：</p>\n<pre><code class=\" language-tsx\">/ @jsx createElement /\nimport { RenderContext } from \"axii\";\nexport function GrandChild({}, { createElement }: RenderContext) {\n    return (\n        &lt;div as=\"root\"&gt;\n            this is grand child\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n<p>描画結果としては、</p>\n<ul>\n<li><code>App</code> コンポーネント内で指定した <code>$root:style</code>、<code>$main:value</code>、<code>$main:style_</code>、および <code>$grandChild</code> の設定が、それぞれ対象となる DOM ノード／子コンポーネントにマージされる</li>\n<li><code>Child</code> や <code>GrandChild</code> には特に余分な Props の定義や透過ロジックは必要なく、設定が必要な DOM 要素や子コンポーネントに対して単に <code>as=\"xxx\"</code> とマークしておくだけでよい</li>\n</ul>\n<h2>実装の仕組み</h2>\n<p>ソースコード上では、主に <code>ComponentHost</code> の実装が鍵となっています：</p>\n<ol>\n<li>コンポーネントが描画される際、axii はコンポーネントのプロパティやレンダリングコンテキスト、ライフサイクルなどを管理するために <code>ComponentHost</code> オブジェクトを作成します。</li>\n<li>受け取ったプロパティを確認し、<code>$</code> で始まるものを<strong>穿透設定</strong>（別名「component AOP」）として扱います。</li>\n<li>これらの穿透設定をまとめて <code>itemConfig</code> に格納し、<code>as=xxx</code> の DOM や子コンポーネントに対しどのような処理を行うのかをマッピングします。例えば：\n<ul>\n<li><code>use</code> : その DOM 要素を完全に置き換えることが可能（既存の DOM を指定して差し替える）</li>\n<li><code>props</code> : その DOM や子コンポーネントに対してプロパティをマージ</li>\n<li><code>eventTarget</code>、<code>_use</code>、<code>_props</code> なども同様</li>\n</ul>\n</li>\n<li>実際に DOM や子コンポーネントを生成する段階で、<code>ComponentHost</code> はこれらの設定に基づいて、該当要素やコンポーネントへプロパティやイベントをバインドしていきます。</li>\n</ol>\n<p>これにより、親コンポーネントの実装で「スライス」的に子コンポーネントの内部に対して追加的なカスタマイズを施せます。これは、通常であれば Props をレイヤーごとに受け渡ししたり、子コンポーネント内で特定のスタイルやイベントをハードコーディングしたりする必要があった部分を大きく簡略化するものです。</p>\n<h2>さらに活用する際の例と注意点</h2>\n<ol>\n<li>\n<p><strong>命名衝突の回避</strong><br>\n子コンポーネントで DOM 要素や別の子コンポーネントに <code>as=\"root\"</code> と設定しているなら、それを設定する際は <code>$root:xxx</code> のように指定します。各ノードで使う <code>as</code> は衝突しないように、かつ識別しやすい名前を付けてください。</p>\n</li>\n<li>\n<p><strong>カスタムマージロジック</strong></p>\n<ul>\n<li><code>$xxx:style_={() =&gt; {...}}</code> のように、コールバックを通して単純な上書き合体でもない、より自由なスタイルのマージが行えます。</li>\n<li><code>$xxx:[prop]_</code> 形式なら、特定のプロパティに対しても同様に、さらに柔軟な操作が可能です。</li>\n</ul>\n</li>\n<li>\n<p><strong>入れ子の設定</strong><br>\n親コンポーネントで <code>$grandChild</code> の設定を行い、その中に <code>$root</code> などの設定が含まれている場合、axii はそれをさらに <code>GrandChild</code> の内部 DOM ノードにマージしていきます。このように、複数階層で同じ仕組みを利用できます。</p>\n</li>\n<li>\n<p><strong>コンポーネント自体の Props の保持</strong><br>\n<code>$xxx:xxx</code> は子要素や子コンポーネントへの穿透設定専用です。コンポーネント自体の Props（例： <code>foo={atomValue}</code> など）はそのままコンポーネント固有のものとして扱われ、穿透ロジックによって上書きされることはありません。</p>\n</li>\n<li>\n<p><strong>DOM の柔軟な置き換えや再利用</strong><br>\n<code>use</code> を使うと、内部で生成するノードを既存の DOM に差し替えることも可能です。たとえば、サードパーティのライブラリによって生成される要素などを子コンポーネントのノードとして活用できるため、より高度な制御が可能です。</p>\n</li>\n</ol>\n<h2>まとめ</h2>\n<p>このような浅い層の AOP ライクな「穿透設定」を活用することで、axii の利用者は、親コンポーネントから一度に子コンポーネントや内部 DOM の属性・イベント・スタイルなどを設定できます。さらに、もともとは子コンポーネント側に書く必要があった少し特殊な処理を \"パッチ\" のように注入することができ、コンポーネントのカプセル化を保ちつつ柔軟に拡張・変更が可能です。これは、React でしばしば見られる Props の頻繁な上提やコールバックの下伝などを減らし、煩雑さを大きく軽減してくれます。</p>\n<p>ただし、この「コンポーネント AOP」的な手法は、あらゆる状況で利用することを意図したものではありません。<strong>通常の props で要件を満たせる場合は、従来どおりのコンポーネントのカプセル化を優先するべき</strong>です。しかし、一部の局所的な箇所で、柔軟かつ深いレベルの変更が必要なシーンでは、この仕組みによって冗長な props の受け渡しを大幅に削減でき、親コンポーネントが子コンポーネント内部を\"侵入\"して個別の設定を行うことが可能になります。</p></div>"
      },
      {
        "name": "4-component_context",
        "content": "<div><p>他のフレームワークと同様に、axii では context を通じてデータを受け渡すことができます。</p></div>"
      },
      {
        "name": "5-styling_transition_and_animation",
        "content": ""
      },
      {
        "name": "6-sideEffect",
        "content": "<div><p>axii は useEffect と useLayoutEffect を使用して副作用を作成することをサポートしています。</p>\n<p>さらに、axii は副作用を処理するためのより優雅な方法を提供しています。\nユーザーは ManualCleanup を継承したクラスを宣言し、destroy メソッドを実装することができます。コンポーネント内でインスタンス化された ManualCleanup のサブクラスは、コンポーネントが破棄されるときに自動的に destroy メソッドを呼び出します。</p></div>"
      },
      {
        "name": "7-create_reactive_data_from_dom_attr",
        "content": "<div><p>DOM の状態はリアクティブではなく、以下のようなことが必要になります：</p>\n<ul>\n<li>イベントコールバックを通じて状態の変化を監視する。</li>\n<li>API を通じてデータの変化を DOM の状態の変化に変換する。</li>\n</ul>\n<p>axii は、よく使用される DOM 状態のリアクティブラッパーを提供しており、ユーザーは createStateFromRef を使用して DOM 状態のリアクティブラッパーをカスタマイズすることもできます。\n既存のラッパーには以下のものがあります：</p>\n<ul>\n<li>dom size（DOM サイズ）</li>\n<li>position（位置）</li>\n<li>drag position（ドラッグ位置）</li>\n<li>scroll position（スクロール位置）</li>\n</ul></div>"
      },
      {
        "name": "8-portal",
        "content": "<div><p>axii は、異なるルートノードの下にコンポーネントをレンダリングすることをサポートしており、ポップアップなどのシナリオでよく使用されます。</p></div>"
      },
      {
        "name": "9-selection",
        "content": "<div><p>axii は、単一選択と複数選択を作成するためのツールをデフォルトで提供しており、選択が変更されたときにすべての行が選択状態を再計算することがないようにしています。これにより、常に高いパフォーマンスを維持します。</p></div>"
      }
    ]
  },
  {
    "name": "3-common_util",
    "sections": [
      {
        "name": "1-router",
        "content": ""
      },
      {
        "name": "2-action",
        "content": ""
      }
    ]
  }
]