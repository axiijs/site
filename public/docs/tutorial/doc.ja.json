[
  {
    "name": "1-basic",
    "sections": [
      {
        "name": "1-introduction",
        "content": "<div><h1>はじめに</h1>\n<p>Axiiはリアクティブデータ構造に基づくフロントエンドフレームワークです。主な特徴は以下の通りです：</p>\n<ul>\n<li>リアクティブデータ構造は、依存関係の変更を受け取った際に完全な再計算を行わず、より効率的な増分計算更新を自動的に使用します。これは特に配列の多くの計算において大きなパフォーマンス向上をもたらします。</li>\n<li>リアクティブデータを識別することにより、DOM構造と属性の正確な更新を実現します。Virtual DOMは不要で、差分計算プロセスもありません。</li>\n</ul>\n<p>Axiiは、ほとんどのシナリオにおいて、開発者が追加の労力を必要とせずに高いパフォーマンスを確保することを目指しています。</p></div>"
      },
      {
        "name": "2-reactive_data_and_dynamic_part",
        "content": "<div><p>Axiiのリアクティブデータ構造には以下の種類があります：</p>\n<ul>\n<li>atom：全体として扱われる原子データ。</li>\n<li>RxList/RxMap/RxSet：コレクションが変更されると信号を発するリアクティブなコレクションデータ構造。ただし、コレクションオブジェクト内部の変更は深くリアクティブではありません。</li>\n<li>RxTime：時間を扱うための特別なリアクティブデータ構造。</li>\n</ul>\n<p>atomは任意のDOM属性に渡すことができ、atomの値が変更されると、DOM属性は自動的に更新されます。\nまた、RxListをDOM配列にマップすることができ、RxListの値が変更されると、DOM配列は自動的に更新されます。</p>\n<p>RxMap/RxSetを使用している場合でも、それらにはRxListに変換できるtoListメソッドがあり、DOM配列にマップすることができます。</p>\n<p>より動的な要件に対しては、生成が必要なDOM構造を表す関数を直接渡すことができます。</p></div>"
      },
      {
        "name": "3-component",
        "content": "<div><p>Axiiコンポーネントの特徴：</p>\n<ul>\n<li>デフォルト値の作成をサポートします。リアクティビティが不要なシナリオでは通常の値を渡すことができ、フレームワークが自動的に変換します。</li>\n<li>内部のDOM要素や子コンポーネントを明示的な命名によって公開することができ、不要なカプセル化を排除します。</li>\n</ul>\n<p>これで、Axiiを楽しく使い始めることができます！</p></div>"
      }
    ]
  },
  {
    "name": "2-advanced",
    "sections": [
      {
        "name": "1-computed",
        "content": "<div><p>リアクティブデータは axii の核となる概念です。\nリアクティブデータを作成する方法は3つあります：</p>\n<ul>\n<li>RxList/RxMap/RxSet の API を使用してリアクティブデータを作成します。API での計算のほとんどは増分形式で、依存関係が変更された場合、すべてを再計算するのではなく、最小限の増分変更のみを行います。API の使用を最優先に考慮すべきです。</li>\n<li>RxList/RxMap/RxSet のコンストラクタを使用してリアクティブデータを作成します。計算ロジックをコンストラクタにパラメータとして渡す場合、計算ロジック内の依存関係が変更されるたびに再計算がトリガーされます。</li>\n<li>computed を使用して atom タイプのリアクティブデータを作成します。依存関係が変更されるたびに再計算がトリガーされます。</li>\n</ul></div>"
      },
      {
        "name": "2-RxList_RxSet_RxMap",
        "content": "<div><p>RxList/RxMap/RxSet は axii の組み込みリアクティブデータ構造です。\nこれらの API は JavaScript の Array/Map/Set に似ています。\nより詳細な例については、それぞれのテストケースを参照してください。</p>\n<ul>\n<li><a href=\"\">RxList</a></li>\n<li><a href=\"\">RxMap</a></li>\n<li><a href=\"\">RxSet</a></li>\n</ul></div>"
      },
      {
        "name": "3-component_configuration",
        "content": "<div><p>axii では、子コンポーネントや DOM ノードを外部に簡単に公開でき、不要なカプセル化を排除できます。\n公開したいノードに <code>as</code> を使用して名前を付けるだけです。</p></div>"
      },
      {
        "name": "4-component_context",
        "content": "<div><p>他のフレームワークと同様に、axii では context を通じてデータを受け渡すことができます。</p></div>"
      },
      {
        "name": "5-styling_transition_and_animation",
        "content": ""
      },
      {
        "name": "6-sideEffect",
        "content": "<div><p>axii は useEffect と useLayoutEffect を使用して副作用を作成することをサポートしています。</p>\n<p>さらに、axii は副作用を処理するためのより優雅な方法を提供しています。\nユーザーは ManualCleanup を継承したクラスを宣言し、destroy メソッドを実装することができます。コンポーネント内でインスタンス化された ManualCleanup のサブクラスは、コンポーネントが破棄されるときに自動的に destroy メソッドを呼び出します。</p></div>"
      },
      {
        "name": "7-create_reactive_data_from_dom_attr",
        "content": ""
      },
      {
        "name": "8-portal",
        "content": ""
      },
      {
        "name": "9-selection",
        "content": ""
      }
    ]
  },
  {
    "name": "3-common_util",
    "sections": [
      {
        "name": "1-router",
        "content": ""
      },
      {
        "name": "2-action",
        "content": ""
      }
    ]
  }
]