[
  {
    "name": "1-basic",
    "sections": [
      {
        "name": "1-introduction",
        "content": "<div><p>Axii 是一个基于响应式数据结构的前端框架。它的主要特点是：</p>\n<ul>\n<li>响应式数据结构在接收到依赖的变化时，不会完全重新计算，而是自动使用更高效的增量计算更新。这在数组的很多计算中会有很大的性能提升。</li>\n<li>通过识别响应式数据来实现 DOM 结构和属性的精确更新。没有 Virtual DOM，没有 diff 过程。</li>\n</ul>\n<p>Axii 希望在绝大部分场景内都为开发者保障高性能，不需要付出额外努力。</p></div>"
      },
      {
        "name": "2-reactive_data_and_dynamic_part",
        "content": "<div><p>Axii 中的响应式数据结构有以下几种：</p>\n<ul>\n<li>atom 原子数据，作为一个整体对待。</li>\n<li>RxList/RxMap/RxSet 响应式的集合类数据结构，当集合发生变化时会传出信号，但集合对象内部的变化不会深度响应。</li>\n<li>RxTime 用于处理时间的特殊响应式数据结构。</li>\n</ul>\n<p>我们可以将 atom 传递给任何 dom 属性，当 atom 的值发生变化时，dom 属性会自动更新。\n我们也可以将 RxList map 成一个 dom 数组，当 RxList 的值发生变化时，dom 数组会自动更新。</p>\n<p>即使你使用的是 RxMap/RxSet，它们也有相应的 toList 方法可以转化成 RxList，这样你就可以将它们 map 成 dom 数组。</p>\n<p>对于更加动态的需求，可以直接传递一个函数来表示需要生成的 dom 结构。</p></div>"
      },
      {
        "name": "3-component",
        "content": "<div><p>Axii 的组件特点：</p>\n<ul>\n<li>支持创建默认值。在不需要响应式的场景中可以传入普通值，框架会自动转化。</li>\n<li>可以通过对内部 dom 或者子组件的显式命名，对外暴露。省去了无意义的封装。</li>\n</ul>\n<p>到这里，你已经可以愉快地使用 Axii 了。</p></div>"
      }
    ]
  },
  {
    "name": "2-advanced",
    "sections": [
      {
        "name": "1-computed",
        "content": "<div><p>响应式数据是 axii 中的核心概念。\n有三种创造响应式数据的方法：</p>\n<ul>\n<li>使用 RxList/RxMap/RxSet 的 api 创造响应式数据。绝大部分 api 中的计算都是增量形式的，这意味着当依赖发生变化时，不会完全重新计算，只会做最小的增量变化。应该优先考虑使用 api 。</li>\n<li>使用 RxList/RxMap/RxSet 的构造函数来创造响应式数据。当把计算逻辑作为参数传递给给构造函数时，每次计算逻辑中的依赖变化都会导致重新计算。</li>\n<li>使用 computed 创造 atom 类型的响应式数据。每次依赖变化都会重新计算。</li>\n</ul></div>"
      },
      {
        "name": "2-RxList_RxSet_RxMap",
        "content": "<div><p>RxList/RxMap/RxSet 是 axii 内置响应式数据结构。\n他们的 api 与 JavaScript 的 Array/Map/Set 类似。\n更详细的例子可以参考它们的测试用例。</p>\n<ul>\n<li><a href=\"https://github.com/sskyy/data0/blob/main/__tests__/rxList.spec.ts\">RxList</a></li>\n<li><a href=\"https://github.com/sskyy/data0/blob/main/__tests__/rxMap.spec.ts\">RxMap</a></li>\n<li><a href=\"https://github.com/sskyy/data0/blob/main/__tests__/rxSet.spec.ts\">RxSet</a></li>\n</ul></div>"
      },
      {
        "name": "3-component_AOP",
        "content": "<div><p>在 axii 中，我们经常会将复杂 UI 封装成一个个组件，然后组合使用。但有些时候，简单的嵌套会带来不少麻烦：</p>\n<ul>\n<li>子组件的多个 DOM 节点或子组件内部的特定属性，需要暴露给父组件配置或使用。</li>\n<li>如果层层透传或增加 Props，难免出现\"无意义\"的中间封装，让组件层级变得复杂。</li>\n</ul>\n<p>为此，axii 提供了一种\"类似 AOP\"的能力，能在父组件直接穿透到子组件内部，灵活地<strong>覆盖</strong>或<strong>打补丁</strong>到内部的 DOM 或子组件上。这样我们就能在保持组件封装的同时，还能按需透传属性和事件，省去许多样板代码。</p>\n<h2>1. 核心思路</h2>\n<p>在 axii 的代码实现中，<code>ComponentHost</code> 会解析我们传入的属性。如果属性名以 <code>$</code> 开头，axii 就会将其当作对子组件或者子元素的\"配置\"处理，而不是本组件的普通属性。<br>\n配置中，冒号后面的部分表示要作用到的属性或方法，比如</p>\n<ul>\n<li><code>$xxx:style</code> 表示给 \"as=xxx\" 的元素添加行内 <code>style</code></li>\n<li><code>$xxx:value</code> 表示给 \"as=xxx\" 的元素设置 <code>value</code> (通常用于 <code>&lt;input&gt;</code> 或类似组件)</li>\n<li><code>$xxx:style_</code> 表示可以自定义合并逻辑，从而对样式进行更灵活的复写</li>\n<li><code>$xxx:children</code> 表示替换对应节点下的子内容</li>\n<li><code>$xxx:_props</code> 表示对内部节点或组件的所有属性进行整体处理，支持自定义的合并逻辑</li>\n</ul>\n<p>在源码中，这些 <code>$</code> 开头的属性被收集并合并到 <code>itemConfig</code> 里，最终在渲染时会将这些逻辑完整地应用到对应的 DOM 节点或子组件上。也就是说，你能在父组件这样做：</p>\n<pre><code class=\"language-tsx\">/ @jsx createElement /\nimport { atom, RenderContext } from \"axii\"\nimport { Child } from \"./Child.js\";\nexport function App({}, { createElement }: RenderContext) {\n    const name = atom('world')\n    return (\n        &lt;Child\n            // 将子组件中 \"as=root\" 的元素添加一个 style\n            $root:style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}\n            // 给 as=main 的 &lt;input&gt; 元素绑定 atom\n            $main:value={name}\n            // 通过 style_ 自定义合并逻辑\n            $main:style_={() =&gt; ({ border: '1px solid black', padding: '10px' })}\n            // 给 \"grandChild\" 节点添加更多配置\n            $grandChild={{\n                '$root:style': { color: 'cyan' }\n            }}\n        /&gt;\n    )\n}\n</code></pre>\n<p>这样，<code>Child</code> 组件内部有分化的多个节点（例如 <code>as=\"root\"</code>、<code>as=\"main\"</code>、<code>as=\"grandChild\"</code>），父组件只需要在属性上用 <code>$</code> 前缀加上对应的别名，就能直接传参或覆盖相应元素/子组件的属性。</p>\n<p>而在子组件 <code>Child</code> 中，可以这样写：</p>\n<pre><code class=\"language-tsx\">/ @jsx createElement /\nimport { RenderContext } from \"axii\";\nimport { GrandChild } from \"./GrandChild.js\";\nexport function Child({}, { createElement }: RenderContext) {\n    return (\n        &lt;div as=\"root\"&gt;\n        &lt;input as=\"main\" /&gt;\n        &lt;button as=\"trigger\"&gt;Submit&lt;/button&gt;\n        &lt;GrandChild as=\"grandChild\" /&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n<p>在 <code>GrandChild</code> 中也是同理：</p>\n<pre><code class=\"language-tsx\">/ @jsx createElement /\nimport { RenderContext } from \"axii\";\nexport function GrandChild({}, { createElement }: RenderContext) {\n    return (\n        &lt;div as=\"root\"&gt;\n            this is grand child\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n<p>整个渲染结果是：</p>\n<ul>\n<li><code>App</code> 中对 <code>$root:style</code>、<code>$main:value</code>、<code>$main:style_</code> 以及 <code>$grandChild</code> 的配置，会合并到对应的 DOM/子组件上</li>\n<li><code>Child</code>、<code>GrandChild</code> 本身并没有任何多余的 Props 定义或透传，它们只需要在需要被配置的 DOM 节点或子组件上标记 <code>as=\"xxx\"</code> 即可</li>\n</ul>\n<h2>2. 具体工作原理</h2>\n<p>在源代码中，这主要依赖 <code>ComponentHost</code> 的实现：</p>\n<ol>\n<li>当渲染组件时，axii 会创建一个 <code>ComponentHost</code> 对象，用于管理该组件的属性、渲染上下文、生命周期等。</li>\n<li>对接收到的属性进行拆分，凡是以 <code>$</code> 开头的键值对，会被认为是<strong>穿透配置</strong>（又称“component AOP”）。</li>\n<li>这些穿透配置会合并到 <code>itemConfig</code> 中，生成一系列“对 as=xxx 的 DOM 或组件进行何种操作”的映射，比如：\n<ul>\n<li><code>use</code>：完全复写这个 DOM 元素，可以直接指定一个已有 DOM 来替换</li>\n<li><code>props</code>：需要合并到这个 DOM 或子组件的属性</li>\n<li><code>eventTarget</code>、<code>_use</code>、<code>_props</code>…… 也都类似</li>\n</ul>\n</li>\n<li>在实际生成 DOM/子组件时，<code>ComponentHost</code> 会根据这些合并好的配置，为对应的 DOM/子组件执行属性或事件绑定。</li>\n</ol>\n<p>因此，你在编写父组件时，就能像“切片”一样，对子组件的内部 DOM/子组件施加额外定制，而不用一层层提取 props 或者在子组件中写死某些样式或事件。</p>\n<h2>更多示例与注意点</h2>\n<ol>\n<li>\n<p><strong>避免命名冲突</strong><br>\n如果你在子组件中给 DOM 元素或子组件取 <code>as=\"root\"</code>，则父组件对它的配置就要以 <code>$root:xxx</code> 的形式标注。请确保在不同节点上使用的 <code>as</code> 不冲突、易区分。</p>\n</li>\n<li>\n<p><strong>自定义合并逻辑</strong></p>\n<ul>\n<li><code>$xxx:style_={() =&gt; {...}}</code> 代表可以针对样式做自定义合并，而不是简单的替换或拼接。</li>\n<li><code>$xxx:[prop]_</code> 也能做类似的处理，对具体属性进行更灵活的操作。</li>\n</ul>\n</li>\n<li>\n<p><strong>组合嵌套</strong><br>\n如果父组件传递的 <code>$grandChild</code> 中还有同样以 <code>$root</code> 开头的配置，那么 axii 会继续将其合并到 <code>GrandChild</code> 内部的 DOM 节点。多层嵌套都可以这样配置。</p>\n</li>\n<li>\n<p><strong>保留组件本身的 Props</strong><br>\n<code>$xxx:xxx</code> 只处理穿透到子节点/组件的需求；而组件本身如果仍有自己的 Props 比如 <code>foo={atomValue}</code> 等，则会被保留在组件自己的属性中，不会被穿透逻辑覆盖。</p>\n</li>\n<li>\n<p><strong>灵活替换或复用 DOM</strong><br>\n<code>use</code> 字段可以直接用一个已存在的 DOM 节点替换内部节点，适合在某些场景下做更高级的操控，比如把子组件的某个纸面 DOM 替换为自定义的 DOM 或第三方库生成的元素。</p>\n</li>\n</ol>\n<h2>3. 小结</h2>\n<p>通过这套穿透配置（类似浅层 AOP）的机制，axii 用户可以在父组件里一口气配置子组件或内部 DOM 的属性、事件、样式，甚至可以将原本要写在子组件里的逻辑“打补丁”到子组件中，实现更灵活的组件使用体验。这种做法在保持组件封装的同时，也让我们随时能突破封装做自定义修改，大大减轻了惯性封装带来的繁琐（如 React 中频繁的属性上提、回调下传等）。</p>\n<p>这种“组件 AOP”并不是用在所有场景下的通用手段。<strong>如果能通过正常的 props 即可满足需求，则应优先保持组件的正常封装</strong>。但当我们确实需要在某些局部进行灵活的深度修改时，这种机制可以大大减少冗余的 props 传递，让父组件“穿透”到子组件内部并施加个性化的定制。</p></div>"
      },
      {
        "name": "4-component_context",
        "content": "<div><p>和其他框架一样， axii 允许通过 context 来传递数据。</p></div>"
      },
      {
        "name": "5-styling_transition_and_animation",
        "content": ""
      },
      {
        "name": "6-sideEffect",
        "content": "<div><p>axii 支持使用 useEffect 和 useLayoutEffect 来创建副作用。</p>\n<p>除此之外，axii 还停工了一种更优雅的方式来处理副作用。\n用户可以申明一个继承自 ManualCleanup 的类，并实现 destroy 方法。任何在组件中实例化的 ManualCleanup 子类都会在组件销毁时自动调用 destroy 方法。</p></div>"
      },
      {
        "name": "7-reactify_DOM_state",
        "content": "<div><p>dom 状态不是 reactive 的，我们往往需要：</p>\n<ul>\n<li>通过事件回调来监听状态变化。</li>\n<li>通过 api 来将数据的变化转化为 dom 状态的变化。</li>\n</ul>\n<p>axii 中提供了经常会用到的 dom 状态的响应式封装，用户也可以继承 ReactiveDOMState 来自定义 dom 状态的响应式封装。\n已有的封装有：</p>\n<ul>\n<li>RxDOMSize</li>\n<li>RxDOMRect</li>\n<li>RxDragPosition</li>\n<li>RxScrollPosition</li>\n</ul></div>"
      },
      {
        "name": "8-portal",
        "content": "<div><p>axii 支持将组件 render 都不同的根节点下，常用弹出框等场景。</p></div>"
      },
      {
        "name": "9-selection",
        "content": "<div><p>axii 中默认提供了创建单选和多选的工具，来确保每次选择变化的时候不会所有行都重新计算 selected 状态。始终保持高性能。</p></div>"
      }
    ]
  },
  {
    "name": "3-common_util",
    "sections": [
      {
        "name": "1-router",
        "content": ""
      },
      {
        "name": "2-action",
        "content": ""
      }
    ]
  }
]