[
  {
    "name": "1-basic",
    "sections": [
      {
        "name": "1-introduction",
        "files": {
          "App.tsx": "/* @jsx createElement */\nimport {atom, RenderContext} from 'axii'\nexport function App({}, { createElement }: RenderContext) {\n    const name = atom('world')\n    setTimeout(() => {\n        name('axii')\n    }, 500)\n    return <div>hello <span>{name}</span></div>\n}",
          "index.tsx": "/*@jsx createElement*/\nimport {createRoot, createElement, atom} from 'axii'\nimport { App } from './App.js'\nconst root = document.getElementById('root')!\nconst appRoot = createRoot(root)\nappRoot.render(<App/>)"
        }
      },
      {
        "name": "2-reactive_data_and_dynamic_part",
        "files": {
          "App.tsx": "/* @jsx createElement */\nimport {atom, RenderContext, RxList} from 'axii'\nexport function App({}, { createElement }: RenderContext) {\n    const newItem = atom('')\n    const items = new RxList<string>([])\n    const onClickAdd = (e:any) => {\n        items.push(newItem())\n        newItem('')\n    }\n    return (\n        <div>\n            <div>\n                <input value={newItem} onInput={(e:any) => newItem(e.target.value)}/>\n                <button onClick={onClickAdd}>add</button>\n            </div>\n            <div>\n                {items.map((item) => {\n                    return <div>{item}</div>\n                })}\n            </div>\n        </div>\n    )\n}",
          "index.tsx": "/*@jsx createElement*/\nimport {createRoot, createElement, atom} from 'axii'\nimport { App } from './App.js'\nconst root = document.getElementById('root')!\nconst appRoot = createRoot(root)\nappRoot.render(<App/>)"
        }
      },
      {
        "name": "3-component",
        "files": {
          "Advanced.tsx": "import {atom, FixedCompatiblePropsType, PropsType, PropTypes, RenderContext, RxList} from \"axii\";\n\nexport const AdvancedProptype = {\n    simpleProps: PropTypes.string.default(() => 'simple'),\n    atomProp: PropTypes.atom<string>().default(() => atom('')),\n    listProp: PropTypes.rxList<string>().default(() => new RxList(['a', 'b'])),\n}\n\nexport function Advanced(props: FixedCompatiblePropsType<typeof AdvancedProptype>, {createElement}: RenderContext) {\n    const {} = props as PropsType<typeof AdvancedProptype>\n    return (\n       <div></div>\n    )\n}\n\nAdvanced.propTypes = AdvancedProptype\n\n",
          "App.tsx": "/* @jsx createElement */\nimport {atom, RenderContext} from 'axii'\nexport function App({}, { createElement }: RenderContext) {\n    const name = atom('world')\n    setTimeout(() => {\n        name('axii')\n    }, 500)\n    return <div>hello <span>{name}</span></div>\n}",
          "Simple.tsx": "import {RenderContext} from \"axii\";\n\nexport type SimpleProps = {\n    foo: any,\n    children: any\n}\n\nexport function Simple({children, foo}:SimpleProps, {createElement}: RenderContext) {\n    return (\n        <div>\n            <div>{foo}</div>\n            <div>{children}</div>\n        </div>\n    )\n}\n",
          "index.tsx": "/*@jsx createElement*/\nimport {createRoot, createElement, atom} from 'axii'\nimport { App } from './App.js'\nconst root = document.getElementById('root')!\nconst appRoot = createRoot(root)\nappRoot.render(<App/>)"
        }
      }
    ]
  },
  {
    "name": "2-advanced",
    "sections": [
      {
        "name": "1-computed",
        "files": {
          "App.tsx": "/* @jsx createElement */\nimport {atom, computed, RenderContext, RxList} from 'axii'\nexport function App({}, { createElement }: RenderContext) {\n\n    const name = atom('world')\n    const greeting = computed(() => `hello ${name()}`)\n\n    const list = new RxList([1, 2, 3])\n    const computedList = new RxList(() => list.map(i => i * 2).toArray())\n\n    const remoteList = new RxList<number>(async function() {\n        // TODO 提供一个远程地址\n        return new Promise((resolve) => {})\n    })\n\n    return <div>\n        <div>{greeting}</div>\n        <div>\n            {list.map((item) => <div>{item}</div>)}\n        </div>\n        <div>\n            {computedList.map((item) => <div>{item}</div>)}\n        </div>\n        <div>\n            <div>{() => `status: ${remoteList.status()}`}</div>\n            <div>\n                {remoteList.map((item) => <div>{item}</div>)}\n            </div>\n        </div>\n    </div>\n}",
          "index.tsx": "/*@jsx createElement*/\nimport {createRoot, createElement, atom} from 'axii'\nimport { App } from './App.js'\nconst root = document.getElementById('root')!\nconst appRoot = createRoot(root)\nappRoot.render(<App/>)"
        }
      },
      {
        "name": "2-RxList_RxSet_RxMap",
        "files": {
          "App.tsx": "/* @jsx createElement */\nimport {atom, RenderContext, RxList} from 'axii'\nexport function App({}, { createElement }: RenderContext) {\n\n    const source = new RxList([1, 2, 3])\n    const doubleMapRuns = atom(0)\n    const double = new RxList(() => source.map(i => {\n        doubleMapRuns(doubleMapRuns.raw + 1)\n        return i * 2\n    }).toArray())\n\n    const incrementalDoubleMapRuns = atom(0)\n    const incrementalDouble = source.map(i => {\n        incrementalDoubleMapRuns(incrementalDoubleMapRuns.raw + 1)\n        return i * 2\n    })\n\n\n    return <div>\n        <div>\n            <button onClick={() => source.push(source.length() + 1)}>add</button>\n        </div>\n        <div>\n            <div>{() => `double map runs: ${doubleMapRuns()}`}</div>\n            {double.map((item) => <div>{item}</div>)}\n        </div>\n        <div>\n            <div>{() => `incremental double map runs: ${incrementalDoubleMapRuns}`}</div>\n            {incrementalDouble.map((item) => <div>{item}</div>)}\n        </div>\n    </div>\n}",
          "index.tsx": "/*@jsx createElement*/\nimport {createRoot, createElement, atom} from 'axii'\nimport { App } from './App.js'\nconst root = document.getElementById('root')!\nconst appRoot = createRoot(root)\nappRoot.render(<App/>)"
        }
      },
      {
        "name": "3-component_configuration",
        "files": {
          "App.tsx": "/* @jsx createElement */\nimport {atom, RenderContext} from 'axii'\nimport { Child } from \"./Child\";\n\nexport function App({}, { createElement }: RenderContext) {\n    const name = atom('world')\n\n\n    return (\n        <Child\n            $main:value ={name}\n            $root:style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}\n            $main:_style={() => ({border: '1px solid black', padding: '10px'})}\n            // TODO use/props/_props 还有什么？？？\n        />\n    )\n}",
          "Child.tsx": "import {RenderContext} from \"axii\";\n\nexport function Child({}, {createElement}: RenderContext) {\n    return (\n        <div as=\"root\">\n            <input as={\"main\"}></input>\n            <button as={\"trigger\"}></button>\n        </div>\n    )\n}\n",
          "index.tsx": "/*@jsx createElement*/\nimport {createRoot, createElement, atom} from 'axii'\nimport { App } from './App.js'\nconst root = document.getElementById('root')!\nconst appRoot = createRoot(root)\nappRoot.render(<App/>)"
        }
      },
      {
        "name": "4-component_context",
        "files": {
          "App.tsx": "/* @jsx createElement */\nimport {ContextProvider, RenderContext} from 'axii'\nimport {Child} from \"./Child.js\";\nimport {RootContext} from \"./RootContext.js\";\n\nexport function App({}, { createElement }: RenderContext) {\n    return (\n        <div>\n            <ContextProvider contextType={RootContext} value={'red'}>\n                <Child />\n            </ContextProvider>\n            <ContextProvider contextType={RootContext} value={'blue'}>\n                <Child />\n            </ContextProvider>\n        </div>\n    )\n}",
          "Child.tsx": "/* @jsx createElement */\nimport {atom, RenderContext, createContext} from 'axii'\n\nimport {RootContext} from \"./RootContext.js\";\n\nexport function Child({}, { createElement, context }: RenderContext) {\n    return (\n        <div style={{color: context.get(RootContext)}}>\n            child component\n        </div>\n    )\n}",
          "RootContext.tsx": "import {createContext} from \"axii\";\n\nexport const RootContext = createContext('root')",
          "index.tsx": "/*@jsx createElement*/\nimport {createRoot, createElement, atom} from 'axii'\nimport { App } from './App.js'\nconst root = document.getElementById('root')!\nconst appRoot = createRoot(root)\nappRoot.render(<App/>)"
        }
      },
      {
        "name": "5-styling_transition_and_animation",
        "files": {
          "App.tsx": "/* @jsx createElement */\nimport {atom, RenderContext} from 'axii'\nexport function App({}, { createElement }: RenderContext) {\n\n    const style= {\n        // 普通形式，支持 数组\n        margin: 10,\n        // 支持数组形式\n        padding: [10, 20],\n        // 支持嵌套+伪类\n        '&:hover': {\n            background:'blue'\n        },\n        // 支持嵌套\n        '& span': {\n            color: 'white'\n        },\n        // 支持 @ rule\n        '@keyframes': {\n            from: { transform: 'rotate(0deg)' },\n            to: { transform: 'rotate(359deg)' }\n        },\n        lineHeight: 0,\n        animation: `@self 4s linear infinite`,\n        transformOrigin: 'center center',\n    }\n\n    // TODO 通过数组实现开始形式的 transition\n\n    return <div style={style}><span>in component</span></div>\n}",
          "index.tsx": "/*@jsx createElement*/\nimport {createRoot, createElement, atom} from 'axii'\nimport { App } from './App.js'\nconst root = document.getElementById('root')!\nconst appRoot = createRoot(root)\nappRoot.render(<App/>)"
        }
      }
    ]
  },
  {
    "name": "3-common_util",
    "sections": []
  }
]